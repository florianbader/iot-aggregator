parameters:
  Environment: dev

stages:
  - stage: ${{ parameters.Environment }}
    variables:
      # IoTHubName
      - group: 'IoTHubName.${{ parameters.Environment }}'

      - name: ImageUrlWithoutVersion
        value: $(ContainerRegistryUrl)/${{ parameters.Environment }}/$(ModuleName)
      - name: ImageUrl
        value: $(ImageUrlWithoutVersion):$(Version)

      - name: VersionNumber
        value: $[format('{0}{1}{2}', variables['Version.MajorMinor'], variables['Version.Revision'])]
    condition: and(succeeded(), neq(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: ${{ parameters.Environment }}
        displayName: 'Deploying ${{ parameters.Environment }}'
        strategy:
          runOnce:
              deploy:
                steps:
                - task: Docker@2
                  inputs:
                    command: login
                    containerRegistry: $(ContainerRegistryServiceName)

                - script: |
                    docker pull $(ImageBuildUrl)-arm32v7
                    docker pull $(ImageBuildUrl)-amd64
                  displayName: 'Pull images'

                - script: |
                    docker tag $(ImageBuildUrl)-arm32v7 $(ImageUrl)-arm32v7
                    docker tag $(ImageBuildUrl)-amd64 $(ImageUrl)-amd64
                  displayName: 'Tag images'

                - script: |
                    docker push $(ImageUrl)-arm32v7
                    docker push $(ImageUrl)-amd64
                  displayName: 'Push images'

                - script: |
                    docker manifest create $(ImageUrl) $(ImageUrl)-arm32v7 $(ImageUrl)-amd64
                    docker manifest push $(ImageUrl)

                    docker manifest create $(ImageUrlWithoutVersion):latest $(ImageUrl)-arm32v7 $(ImageUrl)-amd64
                    docker manifest push $(ImageUrlWithoutVersion):latest
                  env:
                    DOCKER_CLI_EXPERIMENTAL: enabled
                  displayName: 'Publish manifest'

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: $(AzureSubscriptionServiceName)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: az extension add -n azure-cli-iot-ext
                  displayName: 'Install Azure CLI IoT extension'

                - download: current
                  artifact: DeploymentTemplate

                - pwsh: |
                    $filePath = "$(Pipeline.Workspace)/DeploymentTemplate/deployment.template.json"
                    $content = gc $filePath

                    $content = $content.replace('__Environment__', '${{ parameters.Environment }}')
                    $content = $content.replace('__Version__', '$(Version)')
                    $content = $content.replace('__ContainerRegistryUrl__', '$(ContainerRegistryUrl)')
                    $content = $content.replace('__ContainerRegistryUsername__', '$(ContainerRegistryUsername)')
                    $content = $content.replace('__ContainerRegistryPassword__', '$(ContainerRegistryPassword)')
                    $content = $content.replace('__UpstreamProtocol__', '$(UpstreamProtocol)')

                    sc $filePath $content
                  displayName: 'Replace tokens in deployment template'

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: $(AzureSubscriptionServiceName)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az iot edge deployment create -n $(IoTHubName) -d $(ModuleName}-$(VersionNumber) --target-condition "tags.environment='${{ parameters.Environment }}'" --priority $(VersionNumber)0 --content $(Pipeline.Workspace)/DeploymentTemplate/deployment.template.json
                  displayName: 'Create IoT Hub edge deployment'

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: $(AzureSubscriptionServiceName)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      deployments=$(az iot edge deployment list --hub-name $(IoTHubName) --query "[? contains(id, '$(ModuleName}') && id != '$(ModuleName}-$(VersionNumber)'].id" -o tsv)
                      for deployment in $deployments
                      do
                        az iot edge deployment delete --deployment-id $deployment --hub-name $(IoTHubName)
                      done
                  displayName: 'Delete old IoT Hub edge deployments'


